아파치 플링크로하는 스트림 데이터 처리 – 파비안 휴스케

플링크는 분산 스트림 처리 소프트웨어다.
 
트랜잭션 애플리케이션은 테이블 스키마 변경이나 데이터베이스 시스템을 확장할 때 조심스럽게 계획을 세우고 많은 노력을 쏟아야 한다.

보통 마이크로서비스에 필요한 모든 소프트웨어와 서비스를 하나로 묶어 독립 컨테이너에 배포한다.
 
분산 질의를 할 때는 트랜잭션 데이터베이스에 직접 연결해 분석 질의를 실행하기보다는 분석 질의 전용 데이터 저장소인 데이터 웨어하우스에 데이터를 복제한 후 실행한다.
데이터 웨어하우스로 데이터를 복제하는 처리를 ETL이라고 부른다.
하둡 생태계는 이제 IT인프라의 일부가 되었다. 모든 데이터를 HDFS나 S3, HBase같은 벌크 저장소에 저장한다.

한 번에 한 레코드를 처리하고 변환하는 애플리케이션이 아니라면 상태는 꼭 필요하다. 
플링크는 애플리케이션 상태를 로컬 메모리나 임베디드 데이터베이스에 저장한다. 플링크는 분산 시스템이므로 로컬에 저장한 상태는 애플리케이션이나 장비 고장에 대비해 데이터가 유실되지 않도록 보호해야 한다.

 
상태가 있는 스트림 처리 애플리케이션은 주로 이벤트 로그에서 이벤트를 가져온다.

스트리밍 처리 애플리케이션 3가지 패턴
1.	이벤트 주도 애플리케이션
2.	데이터 파이프라인
3.	스트리밍 분석
이벤트 주도 애플리케이션의 일반적인 유스케이스는 아래와 같다.
	실시간 추천
	패턴 감지나 복합 이벤트 처리(CEP)
	이상 탐지
 
이벤트 로그는 이벤트 전송과 수신을 분리하고 비동기, 논블로킹으로 이벤트를 전송한다.
수평확장과 장애 극복은 스트림 처리기가 관리하며, 이벤트 로그를 입력소스로 사용함으로써 애플리케이션 입력 데이터를 안정적으로 저장하고 이벤트의 순서를 보장해서 이벤트를 여러 번 처리할 수 있게 한다.
플링크는 애플리케이션의 상태를 이전 세이브포인트로 설정해 상태를 잃지 않고 애플리케이션을 업그레이드하거나 수평 확장할 수 있게 해준다.

서로 다른 데이터 저장 시스템의 데이터를 동기화하는 전통적인 방법은 주기적으로 ETL 작업을 수행하는 것이다.
짧은 지연으로 데이터를 가져와 변환, 삽입하는 유스케이스는 상태가 있는 스트림 처리에서 자주 사용하는 패턴이다. 이런 종류의 애플리케이션을 데이터 파이프라인이라 한다.
스트리밍 분석 애플리케이션은 지속적으로 이벤트 스트림을 가져와 짧은 지연 시간으로 최신 이벤트를 처리한 후 결과를 갱신한다.
 
전통적인 분석 파이프라인은 ETL 처리, 저장 시스템, 여러 개별 컴포넌트를 갖고 있다. 반면 상태가 있는 스트리밍 애플리케이션을 실행하는 스트림 처리기는 지속적으로 이벤트를 가져오고, 상태를 관리하며, 연산한 결과를 갱신하는 모든 절차를 관리한다.

스트리밍 분석 애플리케이션은 보통 다음과 같은 경우에 사용한다.
	휴대전화 네트워크 품질 모니터링
	모바일 애플리케이션의 사용자 행동분석
	가전제품의 라이브 데이터 애드혹 분석

 
람다 아키텍처는 주기적으로 배치 처리를 수행하는 전통적인 아키텍처에 짧은 시간을 제공하는 스트림 처리 기반의 스피드 계층을 추가한 변형이다.
람다 아키텍처의 본 목표는 배치 분석 아키텍처 결과의 늦은 지연 시간을 보완하기 위한 것이었다.

플링크는 3세대 분산 스트림 처리기다. 

플링크만의 구별되는 기능
1.	이벤트 시간 처리 시멘틱은 순서가 바뀐 이벤트가 들어와도 일관성 있고 정확한 결과를 제공한다.
2.	상태 일관성을 보장한다.
3.	여러 저장 시스템에 연결하는 커넥터를 제공한다.
4.	애플리케이션 상태를 잃지 않고 다른 플링크 클러스터로 잡 코드를 업그레이드하거나 잡을 마이그레이션 할 수 있는 기능을 제공한다.

플링크 대시보드 들어가려면 localhost:8081 

데이터 플로우 프로그램은 데이터 처리 연산 사이로 데이터가 어떻게 흐르는지 기술한다.
방향성 그래프는 데이터 플로우 프로그램을 표현하는 일반적인 방법이다.
데이터 플로우 그래프는 최소 하나의 소스와 싱크를 가지고 있어야 한다.

 
위 데이터 플로우 그래프는 개념적 수준에서 바라본 계산 로직의 모습을 그린 것으로 논리적 데이터 플로우 그래프라 한다.
물리적 데이터 플로우는 프로그램을 어떻게 실행해야 하는지 자세하게 지정한다.
물리적 데이터 플로우에서 노드는 태스크(Task)다.
 
데이터 병렬화 = 동일 연산을 수행하는 태스크를 각 입력 파티션에 할당해 병렬로 실행한다.
태스크 병렬화 = 같거나 다른 데이터에 여러 연산을 수행하는 태스크를 할당할 수 있다.

데이터 교환전략 = 물리적 데이터 플로우 그래프에서 어떤 태스크로 레코드를 할당할지 정의한다.
 
전진 전략 = 한 태스크로 들어온 데이터를 다른 태스크 쪽으로 내보낸다.
브로드캐스트 전략 = 모든 레코드를 연산자의 모든 병렬 태스크로 내보낸다.
키 기반 전략 = 데이터를 키 기준으로 모아 같은 키 값을 가진 데이터는 같은 태스크에 모이도록 보장.
랜덤 전략 = 각 계산 태스크의 부하를 균등하게 분산시키고자 모든 연산자 태스크로 데이터를 균등하게 분배.
 
데이터 스트림은 무한 이벤트 순서열이다. 빠른 속도로 이벤트를 처리하면서 최대한 빠르게 계산 결과를 제공해야 한다. 
스트리밍 애플리케이션은 지속적으로 실행되고 입력이 무한이므로 전체 실행 시간은 중요하지 않다.
지연 = 이벤트를 처리하는 데 얼마나 많은 시간이 걸리는지 나타낸다. 데이터 스트리밍에서는 밀리초 단위로 측정한다. 
처리율 = 시스템의 처리량을 측정하는 메트릭. 처리율을 높게 잡고 싶다면 지연을 가능한 짧게 잡아야 한다.
처리율은 이벤트 도착 비율에 의존한다는 것을 명심해야 한다.
시스템이 처리할 수 있는 비율보다 높게 데이터를 계속 받으면 버퍼링도 불가능하게 돼 데이터를 잃을수도 있다. 이를 backpressure라고 한다.
상태가 없는 연산의 이벤트는 서로 독립적이고 도착하는 순서에 의존하지 않으므로 병렬화하기 쉽다.
데이터 인입 = 외부 소스에서 원시 데이터를 가져와 스트림 처리에 맞는 형식으로 변환하는 연산
데이터 방출 = 데이터를 수신할 외부 시스템의 소비 형태에 맞게 데이터 형식을 변환해 내보내는 연산.
변환 연산 = 단일 경로 연산으로, 각 이벤트를 독립적으로 처리한다. 이벤트를 하나씩 소비하면서 각 이벤트 데이터에 변환 연산을 적용한 후 변환된 이벤트를 새 출력 스트림으로 내보낸다.
롤링 집계 = 합계, 최솟값, 최댓값 같은 집계 연산으로, 이벤트가 들어올 때마다 계속해서 상태를 갱신한다.

 

윈도우 연산 = 어떤 연산은 결과를 계산할 때 일정량의 이벤트를 모아 보관하고 있어야 한다. 이런 집계 연산을 무한 스트림에서 효과적으로 수행하는 서비스를 제공하는 윈도우 연산자.
윈도우 연산은 무한 이벤트 스트림에서 버킷이라 부르는 이벤트의 유한집합을 지속적으로 생성하고, 이 유한집합에 어떤 연산을 수행할 수 있게 해 준다.
윈도우 연산자의 시멘틱을 정확하게 정의하려면 얼마나 많은 이벤트를 버킷에 넣고, 윈도우가 얼마나 자주 결과를 만들어낼지 정해야 한다.

텀블링 윈도우 = 고정 길이에 서로 겹치지 않는 버킷으로 이벤트를 할당한다.
 
 
슬라이딩 윈도우 = 서로 겹치는 고정 길이의 버킷으로 이벤트를 할당한다. 슬라이드 값은 새 버킷이 생성될 때까지의 간격을 정의한다.
세션 윈도우 = 세션이 종료됐다고 판단할 수 있는 비활동 시간을 세션 격차라는 값으로 정의해서 이벤트들을 세션으로 그룹화한다.
 
병렬 윈도우의 각 파티션별로 다른 윈도우 정책을 적용할 수 있다.
윈도우 연산은 시간, 상태관리에 밀접한 관련이 있다. 위에 언급한 윈도우 종류는 결과를 생성하기 전에 데이터를 버퍼링해야 한다.

처리시간 = 스트림 처리 연산자가 실행 중인 장비의 시계에서 측정한 로컬 시간. 로컬시간을 기준으로 일정 시간동안 윈도우 연산자에 도달한 모든 이벤트는 처리시간 윈도우 안으로 들어간다.
이벤트시간 = 이벤트가 실제 발생한 시간. 이벤트시간은 이벤트 내용 안에 포함된 타임스탬프를 기반으로 한다.
이벤트시간을 이용해 처리하면 데이터의 순서가 바뀌더라도 결과의 정확성을 보장할 수 있다.
워터마크 = 이벤트가 더 지연되지 않고 도착할 것이라고 확신할 수 있는 시점을 가리키는 메트릭. 전체 진행 시간을 나타낸다.
워터마크는 결과의 신뢰성과 지연 사이의 균형을 맞출 수 있는 설정을 제공한다.
워터마크를 빠듯하게 발생시키면 짧은 지연은 보장되나 낮은 신뢰성을 가진다.
워터마크를 느슨하게 발생시키면 높은 신뢰성은 제공되나 처리 지연이 발생할 수 있다.
스트림 연산자는 내부 상태가 무한으로 커지지 않게 조심해야 한다. 
상태가 있는 연산자를 제공하려면 아래 항목들을 극복해야 한다.
	상태 관리
	상태 분할
	상태 복구

스트리밍 시스템은 데이터플로우를 실행하기 전에 논리 데이터플로우 그래프를 연산 로직 실행, 데이터 소비, 데이터 출력과 같은 태스크로 변환하고, 이들 태스크를 병렬로 연결한 물리 데이터플로우 그래프로 번역한다.

태스크란 입력 스트림의 각 이벤트를 대상으로
1.	이벤트를 수신해 로컬 버퍼에 저장
2.	경우에 따라 내부 상태 갱신
3.	출력 레코드 생산이라는 절차 수행
하는 처리 단계다.

결과보장 = 스트림 처리기 내부 상태의 일관성 의미
	최대 한번 = 각 이벤트를 최대 한 번 처리하는 것을 보장하는 낮은 수준 보장
	최소 한번 = 일부는 한 번 이상 처리할 수도 있다.
	정확히 한번 = 최소 한번 + 내부 상태 일관성 보장이 필요
	단대단 정확히 한번 = 전체 데이터처리 파이프라인에 걸친 결과의 정확성 의미

플링크는 애플리케이션을 여러 장비에 분산시켜 실행하므로 설치 절차가 복잡하다.

플링크 컴포넌트는 4개로 구성되어있다.
1.	잡 매니저 = 애플리케이션의 실행을 제어하는 마스터 프로세스. 잡 그래프라 불리는 논리 데이터플로우 그래프와 애플리케이션에 필요한 모든 클래스, 라이브러리, 기타 자원을 포함하는 JAR 파일로 구성.
2.	리소스 매니저 = 플링크 실행 단위인 태스크 매니저 슬롯을 관리한다. 
3.	태스크 매니저 = 워커 프로세스. 한 플링크 클러스터는 여러 태스크 매니저를 가지고 있다. 태스크가 다른 태스크 매니저에 있는 태스크와 통신이 필요하면 태스크 매니저를 통해 데이터 교환이 가능.
4.	디스패처 = 여러 잡 실행할 때 사용하며, 애플리케이션을 제출할 수 있는 REST 인터페이스 제공.

 
플링크는 애플리케이션을 아래와 같은 2가지 방식으로 배치한다.
1.	프레임워크 방식 = 플링크 애플리케이션을 하나의 JAR파일로 패키징 한 후 클라이언트를 이용해 현재 실행 중인 서비스 중 하나로 제출. 애플리케이션을 디스패처나 YARN 리소스 매니저로 제출하면 잡 매니저를 기동하고 제출한 애플리케이션을 잡 매니저로 넘긴다.
2.	라이브러리 방식 = 플링크 애플리케이션을 도커 이미지처럼 애플리케이션에 특화된 컨테이너 이미지로 만든다. 이미지에서 시작한 컨테이너는 태스크 매니저를 시작하며, 태스크 매니저는 리소스 매니저에 연결해 슬롯을 등록한다.

태스크 매니저는 동시에 여러 태스크를 실행할 수 있다. 같은 연산자, 다른 연산자, 또는 다른 애플리케이션 태스크가 태스크 매니저의 태스크가 될 수 있다.

 
태스크 매니저는 JVM 프로세스 안에서 멀티스레드로 태스크를 실행한다.
실패에서 복구하려면 시스템은 우선 실패한 프로세스를 재시작해야하고, 이어서 애플리케이션과 상태를 재시작해야 한다.
태스크 매니저 중 하나가 실패하면 가용 슬롯이 줄어든다. 이 상황에서 잡 매니저는 리소스 매니저에게 더 많은 슬롯을 제공하도록 요청할 것. 이 요청이 불가능 할 때 잡 매니저는 애플리케이션은 재시작할 수 없다.
애플리케이션의 재시작 전략은 잡 매니저가 얼마나 자주 애플리케이션을 재시작하고 재시작 시도 동안 얼마나 오래 기다릴지 결정한다.
플링크의 잡 매니저는 SPOF다. 플링크의 고가용성 모드는 주키퍼를 기반으로 한다.

 

잡 매니저가 실패하면 애플리케이션에 속한 모든 태스크는 자동으로 취소된다. 실패한 잡 매니저에서 모든 작업을 인계받은 새 잡 매니저는 아래 절차를 수행한다.
1.	새 잡 매니저는 원격 저장소의 잡 그래프, JAR파일, 마지막 체크포인트 위치 정보를 주키퍼에 요청한다.
2.	새 잡 매니저는 애플리케이션을 계속 실행할 때 필요한 처리 슬롯을 리소스 매니저로 요청한다.
3.	새 잡 매니저는 애플리케이션을 재시작하고 모든 태스크의 상태를 마지막 완료한 체크포인트로 재설정한다.
각 태스크 매니저는 데이터를 주고받을 때 사용하는 네트워크 버퍼 풀을 갖고 있다.

 
태스크 매니저는 일대일 관계의 전용 TCP 연결을 유지해 다른 태스크 매니저와 데이터를 교환한다.
파이프라인 방식으로 매끄럽게 데이터를 교환하려면 태스크 매니저는 외부로 나가거나 들어오는 모든 연결을 동시에 처리할 수 있을 만큼 충분한 버퍼를 제공해야 한다.
수신 태스크는 큐에서 버퍼를 꺼낸 후 역직렬화 해 레코드로 만든다.

플링크는 크레딧 기반 흐름제어를 구현했다. 수신 태스크가 데이터를 받을 수 있는 충분한 자원을 준비하자마자 데이터를 전송하므로 지연 시간을 줄일 수 있다. 데이터의 전송이 특정 태스크에 편향돼있을 때 전송 태스크의 백로그 크기에 따라 크레딧을 부여하므로, 네트워크 자원을 균등하게 분배하는 효과적인 방식이다.

플링크는 특정 조건에서 로컬 통신의 부하를 줄이는 태스크 체이닝 최적화 기법을 사용한다. 태스크 체이닝을 사용하려면 두 개 이상의 연산자가 동일한 병렬 값으로 설정돼 있어야 하고, 연산자들이 로컬 포워드 채널로 연결돼야 한다.
 
태스크 체이닝은 로컬 태스크 간의 통신 비용을 극적으로 줄여준다.
플링크의 태스크 체이닝은 기본으로 활성화 되어 있다.

플링크 이벤트 시간 애플리케이션이 처리하는 모든 레코드는 타임스탬프를 동반해야 한다. 타임스탬프는 레코드를 특정 시점과 결부시킨다.
이벤트 시간 모드로 데이터 스트림을 처리할 때 플링크는 레코드의 타임스탬프를 이용해 시간 기반 연산자를 실행한다.
이벤트 시간 애플리케이션의 각 태스크는 워터마크를 사용해 현재 이벤트 시간을 얻는다.
플링크는 워터마크를 Long값의 타임스탬프를 가진 특별한 레코드를 추가해 구현했다.

 
워터마크의 속성 중 하나는 애플리케이션 결과의 완성도와 지연을 애플리케이션이 제어할 수 있게 한다는 것.
플링크는 워터마크를 연산자 태스크가 받아서 내보내는 특별한 레코드로 구현했다.

태스크는 각 입력 파티션에 대해 하나의 워터마크를 유지한다.
입력 파티션에서 워터마크를 받으면 해당 파티션의 현재 워터마크 값과 새 워터마크 값을 비교해 최댓값을 새 워터마크로 갱신한다.
이벤트 시간 시계가 앞으로 흐르면 태스크는 등록된 타이머 중 시간이 만료된 모든 타이머를 활성화한다.
 
 
플링크의 워터마크 처리와 전파 알고리즘은 연산자 태스크로부터 생성된 레코드가 워터마크와 최대한 동기화된 타임스탬프를 갖도록 보장한다.
타임스탬프 결정은 애플리케이션이 하고 워터마크는 타임스탬프와 스트림의 특성에 의존하므로 애플리케이션이 명시적으로 타임스탬프를 할당하고 워터마크를 생성해야 한다.

세 가지 방식으로 스트림에 타임스탬프를 할당하고 워터마크를 생성할 수 있다.
1.	소스에서 SourceFunction을 통해 애플리케이션으로 스트림이 들어올 때 타임스탬프를 할당하고 워터마크를 생성할 수 있다.
2.	주기적인 할당자 = DataStream API는 각 레코드에서 타임스탬프를 추출하는 AssignerWithPeriodicWatermarks라 부르는 사용자 정의 함수에 주기적으로 질의해 현재 워터마크를 알아낸다.
3.	구두점 할당자 = AssignerWithPunctuatedWatermarks는 각 레코드에서 타임스탬프를 추출하는 또 다른 사용자 정의 함수.

레코드를 처리하고 나면 레코드의 타임스탬프나 순서 파악이 어려워질 수 있으므로 보통 소스 연산자에 가까운 곳에 사용자 정의 스탬프함수를 적용한다.

플링크는 모든 상태를 동일하게 취급한다. 

 
데이터 처리 중 태스크는 상태를 읽거나 갱신할 수 있고, 입력 데이터와 현재 상태를 기반으로 새로운 결과를 생산할 수 있다.
플링크에서 상태는 항상 특정 연산자와 연관돼 있다.
연산자 상태의 스코프는 연산자 태스크 한 개다. 즉, 한 태스크가 처리하는 모든 레코드가 동일 상태에 접근할 수 있다는 의미.
 
플링크는 3종류 기본 연산자 상태를 제공한다.
1.	리스트 상태
2.	유니온 리스트 상태
3.	브로드캐스트 상태 = 연산자의 모든 태스크 상태가 동일한, 특수한 경우에 사용하는 연산자 상태

키 상태는 레코드의 각 키 값별로 유지하고 접근할 수 있는 상태다. 플링크는 각 키 값별로 하나의 상태 인스턴스를 유지하고, 이 키 상태를 관리하는 연산자 태스크로 동일 키의 모든 레코드를 전송한다.
 
키-값 맵 처럼 키 값으로 연산자 병렬 태스크에 레코드를 분배한 것을 ‘키상태’라고 설명할 수 있다.
1.	값 상태 = 임의 타입을 키별로 저장
2.	리스트 상태 = 각 키별로 값 리스트 저장
3.	맵 상태 = 키별로 키-값 맵 저장

상태 백엔드는 모든 키 상태를 저장하고 키 상태의 접근을 정확히 현재 키 스코프에서만 가능하게 보장하면서 상태를 로컬에 유지한다. 플링크는 JVM 힙의 메모리 데이터 구조인 객체를 저장하는 것처럼 상태를 관리하는 메모리 상태 백엔드를 제공한다.
플링크는 분산 시스템인 것에 반해 상태를 로컬에서 관리하므로 상태 체크포인트는 중요하다.
태스크 매니저 저장소는 휘발성이라 생각해야 한다. 상태 백엔드는 원격의 영구저장소에 태스크의 상태를 체크포인팅한다.

플링크는 4가지 패턴으로 상태의 수평 확장을 지원한다.
1. 키 상태를 사용하는 연산자는 수평확장 때 병렬 태스크가 갖고 있는 키들을 더 적거나 많게 재분할한다.
2. 리스트 상태를 사용하는 연산자는 리스트 요소를 재분배해 확장한다.
 
 
 
 
3. 유니온 리스트 상태를 사용하는 연산자는 모든 리스트 요소를 각 태스크로 브로드캐스트해 확장한다.
4. 브로드캐스트 상태를 사용하는 연산자는 상태를 새로운 태스크로 복사해 확장한다.

상태가 있는 스트리밍 애플리케이션의 일관성 체크포인트란 모든 태스크가 정확히 동일한 시점에 각 태스크의 상태를 복사하는 것이다.

단순 체크포인트 알고리즘을 사용하는 애플리케이션 <그림 3-17>

스트리밍 애플리케이션 실행 동안 플링크는 주기적으로 일관성 체크포인팅을 수행해 상태를 원격 저장소에 저장한다. 장애가 발생하면 플링크는 가장 최신 체크포인트를 사용해 일관성 있게 애플리케이션 상태를 복구하고 레코드 처리를 재시작한다.
 
 
애플리케이션 복구는 3단계로 한다.
1.	전체 애플리케이션 재시작
2.	상태가 있는 모든 태스크 상태를 가장 최신의 체크포인트로 재설정
3.	모든 태스크 처리 재시작

애플리케이션의 모든 입력 스트림이 재설정 가능한 데이터 소스에서 데이터를 소비하면 정확히 한 번 상태 일관성 아래서 운영할 수 있다.
플링크는 일부 저장 시스템에 대해 체크포인팅 시점에 레코드를 모두 저장하는 방식으로 정확히 한 번 출력이 가능한 싱크 함수를 제공한다.
플링크는 ‘챈디-램포트’ 알고리즘을 기반으로 분산 스냅샷 체크포인팅을 구현했다. 이 알고리즘은 애플리케이션 전체를 저장하지 않고 체크포인트와 데이터 처리 간의 결합을 분리한다.
플링크의 체크포인트 알고리즘은 체크포인트 배리어 라 불리는 레코드를 사용한다.
배리어는 다른 레코드를 추월하거나 추월 당할 수 없다.
배리어는 레코드가 어떤 체크포인트에 속해 있는지를 식별할 수 있는 체크포인트 식별자를 실어 나른다.
체크포인트 배리어 이전에 처리한 레코드가 만든 상태 변경은 배리어의 현재 체크포인트에 포함되고 배리어 이후 레코드가 만든 모든 상태 변경은 다음 체크포인트에 포함된다.

예) 순차적으로 커지는 숫자 스트림을 소비하는 두 개의 소스 태스크
 
 
 
 


소스태스크는 체크포인트 메시지를 수신하면 레코드를 내보내지 않는다.
소스태스크는 로컬 상태를 상태 백엔드에 체크포인팅하고 체크포인트 배리어를 밖으로 향하는 모든 스트림 파티션으로 브로드캐스트한다.
태스크가 새 체크포인트 배리어를 수신하면 체크포인팅 수행을 위해 모든 입력 파티션에서 배리어가 도착하기를 기다린다.

 
 
모든 배리어가 도착하기를 기다리는 것을 배리어 정렬이라 한다.
 
태스크가 상태를 체크포인팅하는 동안 모든 처리는 중지되고 입력 데이터는 버퍼에 쌓인다.
플링크 설계상 체크포인팅 수행은 상태 백엔드의 책임이다.
백그라운드 스레드는 로컬 스냅샷을 원격 저장소에 비동기로 복사하고 체크포인팅이 완료되면 태스크에 알린다.
처리 지연의 관점에서 체크포인트 알고리즘의 영향을 줄일 수 있는 다른 기법은 ‘배리어 정렬단계’를 변형하는 것이다.
체크포인트의 모든 배리어가 도착하면 연산자의 상태 체크포인팅을 시작한다.
플링크의 복구 알고리즘은 상태 체크포인팅에 기반을 둔다.
플링크는 자동으로 세이브포인트를 생성하지 않는다.
애플리케이션의 상태는 세이브포인트 실행 시점부터 실행된다.
세이브포인트를 이용해서 애플리케이션을 정지시키고 나중에 재시작 할 수 있다.
세이브포인팅이 실행되면 모든 태스크의 상태를 영구 저장소로 복사한다.
 
상태를 유실해도 관계 없는 애플리케이션일 때만 기본 연산자 식별자를 사용하도록 제한해야 한다.

플링크는 새 플링크 메이븐 프로젝트를 부트스트랩할 때 사용할 수 있는 메이븐 아키타입도 제공한다.

플링크 애플리케이션을 작성할 때 처음 해야 할 일은 실행환경 설정이다. 
DataStream API에서 애플리케이션 실행 환경은 StreamExecutionEnvironment로 표현한다.
StreamExecutionEnvironment는 입력 데이터 스트림에서 스트림 소스를 생성하는 메서드를 제공해 애플리케이션으로 데이터를 가져온다.
assignTimestampsAndWatermarks 메서드는 이벤트 시간 처리에 필수인 타임스탬프와 워터마크를 할당한다.
스트리밍 싱크가 애플리케이션 결과의 최소 한 번 이나 정확히 한 번의 일관성을 제공하므로, 어떤 스트리밍 싱크를 선택하는지에 따라 애플리케이션 단대단(end-to-end) 일관성에 영향을 미친다.

변환 연산은 하나 이상의 스트림에 연산을 적용해 출력 스트림으로 변환한다.
map = DataStream.map( ) 메서드를 사용해 새로운 DataStream 을 만든다.
 
filter = 각 이벤트에 대해 Boolean 조건을 평가해 이벤트를 버리거나 앞으로 내보낸다.
Boolean 조건은 FilterFunction 인터페이스를 사용하는 함수나 람다 함수로 구현한다.

 
flatMap = map과 비슷하지만 각 이벤트에 대해 0개 이상의 출력 이벤트를 생성할 수 있다.

 
KeyedStream = 상태가 있는 변환 연산을 적용하면 현재 처리중인 이벤트의 키 스코프에서 상태를 읽거나 쓴다.
keyBy = 특정 키를 이용해 DataStream을 KeyedStream으로 변환한다.
 
롤링 집계 연산 = KeyedStream에 적용해 합계, 최솟값, 최대값 같은 집계 DataStream을 생성한다.
(sum, min, max, minBy, maxBy)
롤링 집계는 키의 수가 유한한 도메인에서만 사용해야 한다.
reduce = 롤링 집계를 일반화 한 것.

다중 스트림 변환 연산
union = 두 개 이상의 동일 타입 DataStream을 병합해 새 DataStream을 만듦.

 
DataStream.connect( ) 메서드는 DataStream을 인자로 받고 ConnectedStreams 객체를 결과로 반환한다.
ConnectedStreams 객체는 CoMapFunction과 CoFlatMapFunction을 각각 인자로 받는 map, flatMap 메서드를 제공한다.
CoMapFunction, CoFlatMapFunction 메서드는 호출 순서를 제어할 수 없다.
BroadcastStream의 모든 이벤트는 이후에 나오는 모든 함수 태스크 인스턴스로 복제된다.
split = 한 입력 스트림을 입력 스트림과 동일한 타입의 여러 출력 스트림으로 분할한다.

 

분산 변환 연산
DataStream API로 스트림 애플리케이션을 개발할 때 플링크는 연산자의 의미와 설정한 병렬 값에 따라 자동으로 데이터 교환 전략을 선택해 데이터를 목적지로 정확히 보낸다.
랜덤 데이터 교환 전략은 DataStream.shuffle( ) 메서드를 호출해 사용할 수 있다. 이 메서드는 연속 균등분포 랜덤 방식으로 이후 연산자 태스크에 이벤트를 분배한다.
rebalance( ) 메서드는 입력 스트림을 여러 파티션으로 나누고, 라운드 로빈 방식으로 이후 연산자 태스크에 이벤트를 균등하게 보낸다.
rescale( ) 메서드 도 이벤트를 라운드 로빈 방식으로 분배하지만, 이후 태스크 중 일부로만 분배한다.
rebalance와 rescale 메서드의 차이는 태스크 연결 모양에 있다.
 
broadcast 메서드는 입력 데이터 스트림을 복재해 이후 연산자의 모든 태스크로 이벤트를 보낸다.
global 메서드는 입력 스트림의 모든 이벤트를 이후 연산자 태스크 중 첫 번째 태스크로 보낸다.

연산자의 병렬 태스크 수를 ‘병렬 값’ 이라고 한다.
애플리케이션을 로컬 환경에서 실행한다면 병렬 값은 CPU 코어 개수만큼 설정될 것이다.
보통 연산자의 병렬 값을 실행 환경 기본값의 상댓값으로 정의하는 것이 좋다.

플링크는 타입정보라는 개념을 사용해 데이터 타입을 표현하고 각 데이터 타입별로 특정 Serializer, Deserializer, Comparator를 생성한다.

플링크는 자바와 스칼라의 일반 데이터 타입을 모두 지원한다.
	Int, String, Double, Long
	튜플
	케이스 클래스
	POJO (공개 클래스, 인자가 없는 공개 생성자 등)
	Array, List, Map, Enum

플링크에서는 가능하면 Kryo를 쓰지 않는게 좋다. (Kryo는 일반 목적의 직렬화 이므로 효율이 떨어짐.)
어떤 키로 조인이나 그룹핑을 할 때 플링크는 TypeInformation을 이용해 키로 사용할 필드가 유효한지 확인하는 시멘틱 검사를 수행한다.
플링크는 TypeInformation을 생성할 때 사용할 수 있는 여러 static 메서드를 자바와 스칼라용 유틸리티 클래스 두 개로 제공한다.
TypeInformation은 두 가지 방식으로 제공할 수 있다. 첫 번째는 반환 타입에 대한 TypeInformation을 명시적으로 제공하는 ResultTypeQueryable을 확장해 함수를 구현하는 것.

데이터 타입이 튜플일 때 키 지정을 튜플의 필드 위치로 단순하게 지정할 수 있다.
키를 지정하는 또 다른 방법은 KeySelector 함수를 사용하는 것이다. 키는 입력 이벤트의 필드일 필요 없이 어떤 계산을 통해 지정할 수 있다.

플링크는 모든 함수 객체를 자바 직렬화를 이용해 직렬화 한 후 작업 태스크로 전송한다. 함수에 포함된 모든 것은 Serializable이어야 한다.

RichFunction을 사용하면 함수 생명주기와 관련된 메서드 두 개를 추가로 구현할 수 있다.
RuntimeContext는 함수의 병렬 값이나 함수 서브태스크 인덱스, 함수를 실행하는 태스크의 이름과 같은 정보를 추출하는 데 사용한다.

플링크 애플리케이션 구현 시 Apache Commons나 Google Guava 같은 유명 라이브러리를 많이 사용한다.
애플리케이션 의존성 라이브러리를 처리할 목적으로 보통 무거운 JAR 파일 만드는 걸 선호한다.

시간 특성은 StreamExecutionEnvironmentm이 속성이고 아래 값 중 하나가 될 수 있다.
	ProcessingTime = 연산자가 스트림 처리중인 장비의 시스템 시계로 데이터 스트림의 현재 시각을 결정하도록 지정한다.
	EventTime = 연산자가 데이터 자체에서 얻은 정보를 사용해 현재 시각을 결정하도록 지정한다.
	IngestionTime = 소스 연산자의 처리 시간을 입력 이벤트의 타임 스탬프로 지정하고, 자동으로 워터마크를 생성한다.

타임스탬프와 워터마크는 1970-01-01T00:00:00Z 이후 유닉스 시간을 밀리초 단위로 지정해야 한다.
가능하면 타임스탬프 할당과 워터마크 생성을 소스 근처 또는 SourceFunction안에서 하는 게 가장 좋다.
이벤트 시간 연산이 기대처럼 동작하게 하려면 이벤트 시간을 이용하는 변환 연산을 호출하기 전에 TimestampAssigner을 호출해야 한다.

주기적인 워터마크 생성은 장비 시간을 기준으로 고정 시간마다 워터마크를 내보내 이벤트 시간이 앞으로 흐르도록 시스템에 지시하는 것을 의미한다.
기본 시간 간격은 200ms지만 ExecutingConfig.setAutoWatermarkInterval( )메서드로 시간 간격을 설정할 수 있다.
최대지연 = 이전에 인입 된 이벤트 중 가장 큰 타임스탬프와 현재 타임스탬프 간 최대 차이

AssignerWithPunctuatedWatermarks 인터페이스는 이벤트마다 extractTimestamp( ) 메서드를 호출한 후 checkAnd
GetNextWatermark( ) 메서드를 호출한다. 이 메서드가 가장 최근에 내보낸 워터마크보다 더 큰 Null이 아닌 워터마크를 반환하면 새 워터마크를 내보낸다.

워터마크를 사용하면 지연과 결과 완성도 사이의 균형을 맞출 수 있다.
이벤트 시간 기반 연산자는 워터마크를 사용해 인입 레코드의 완성도와 연산 진행상태를 결정한다.
오류가 발생하면 부정확한 워터마크를 생성해 연착 데이터가 발생하거나 불필요한 애플리케이션 지연을 유발할 수 있다.
워터마크는 애플리케이션의 동작을 시간으로 제어하는 강력한 방법이다.

DataStream API는 레코드의 타임스탬프와 워터마크에 접근하고 미래의 특정 시점에 동작할 타이머를 등록할 수 있는 저수준 변환 연산 중 하나인 ProcessFunction을 제공한다.
플링크는 8개의 ProcessFunction을 갖고 있다.
모든 ProcessFunction은 RichFunction 인터페이스를 구현한다.

OnTimerContext객체의 TimeService는 아래 메서드를 제공한다.
1.	currentProcessingTime = Long 현재 처리 시간을 반환한다.
2.	currentWatermark = Long 현재 워터마크의 타임스탬프를 반환한다.
3.	registerProcessingTimeTimer = Unit 현재 키의 처리 시간 타이머를 등록한다.
4.	registerEventTimeTimer = Unit 현재 키의 이벤트 시간 타이머를 등록한다.
5.	deleteProcessingTimeTimer = Unit 현재 키의 타이머 중 이전에 등록한 처리시간 타이머를 제거한다.
6.	deleteEventTimeTimer = Unit 현재 키의 타이머 중 이전에 등록한 이벤트 시간 타이머를 제거한다.

플링크는 함수 상태와 함께 타이머도 체크포인팅 한다.
증분 체크포인트로 RocksDB 상태 백엔드를 사용하고 타이머를 힙에 저장한다면 동기적으로 체크포인팅 된다.

사이드 아웃풋은 ProcessFunction의 기능으로 하나의 함수에서 여러 스트림으로 데이터를 내보낸다. 사이드 아웃풋은 OutputTag[X] 객체로 식별한다.
두 입력 스트림으로 저수준 연산을 할 수 있는 CoProcessFunction.

윈도우 연산자는 KeyedStream이나 그 외의 스트림에 적용할 수 있다.
윈도우 연산자를 생성하려면 두 가지 컴포넌트를 필수로 지정해야 한다.
1.	입력 스트림의 이벤트를 어떤 윈도우로 보낼지 결정하는 WindowAssigner
2.	WindowedStream의 윈도우에 할당된 이벤트를 처리하는 윈도우 함수
모든 기본 WindowAssigner는 처리 시간이나 이벤트 시간이 윈도우 종료 시각을 지날 때마다 윈도우를 내보내는 기본 Trigger를 제공한다.
텀블링 윈도우 = 겹치지 않는 고정 길이의 윈도우에 레코드를 할당한다.
 
DataStream API는 TumblingEventTimeWindows와 TumblingProcessingTimeWindows 라는 인자를 제공한다.

세션 윈도우는 다양한 크기의 겹치지 않는 윈도우로 레코드를 할당한다. 세션 윈도우의 경계는 아무런 레코드도 받지 못하는 시간 간격을 나타내는 비활성 갭으로 정의할 수 있다.

윈도우에 적용 가능한 함수
	증분 집계 함수 = 어떤 레코드가 윈도우에 추가될 때 마다 바로 적용하는 함수. ReduceFunction, AggregateFunction이 있다.
	전체 윈도우 함수 = 윈도우의 모든 레코드를 모아 전체 레코드를 순회하며 계산을 수행. 
 
ReduceFunction은 같은 타입의 두 값을 인자로 받아 같은 타입의 한 값으로 합친다.
이벤트 값들의 중앙값이나 자주 등장하는 값처럼 더 복잡한 계산이 필요할 때가 종종 있다. 플링크의 DataFrame API는 ProcessWindowFunction을 제공한다.
윈도우 별 상태는 같은 윈도우에서 process 메서드 호출 간에 공유해야 하는 정보를 보관하는 데 유용하다.
윈도우 별 상태를 사용하는 ProcessWindowFunction은 윈도우가 제거되기 전에 윈도우에 특화된 상태를 정리할 수 있는 clear 메서드를 구현해야 한다.
증분집계 로직이 있는데 윈도우 메타데이터에 접근해야 한다면 증분 집계를 수행하는 ReduceFunction이나 AggregateFunction을 증분집계 함수보다 더 많은 정보에 접근할 수 있는 ProcessWindowFunction과 결합해 사용할 수 있다.
ReduceFunction이나 AggregateFunction처럼 윈도우 연산자가 증분집계 함수를 사용한다면 새로 수신한 레코드는 즉시 집계되고 결과는 윈도우의 상태로 저장된다.

 
WindowAssigner는 레코드를 윈도우에 할당하고, Trigger는 언제 윈도우를 평가할지 결정하고, 윈도우 함수는 실제 윈도우 연산을 수행한다.
적어도 하나의 레코드가 있어야 윈도우도 존재한다.
Trigger는 어떤 시점에 콜백되는 타이머를 등록할 수 있다. 상태를 이용해 작업을 수행할 수 있다.
WindowAssigner는 인입되는 각 레코드를 어떤 윈도우에 할당할지 결정한다.
GlobalWindowsAssigner는 모든 레코드를 하나의 GlobalWindows에 할당한다.
이벤트 시간 윈도우에서 사용자 정의 Trigger는 워터마크가 윈도우의 종료 시각에 도달하기 전에 계산을 수행하고 결과를 일찍 내보내는 데 사용할 수 있다.

Evictor는 플링크 윈도우 처리에서 선택적으로 사용하는 컴포넌트다.
Evictor는 GlobalWindows에 적용해 윈도우 전체 상태를 삭제하지 않고 윈도우 내용 일부를 정리하는 데 사용할 수도 있다.

간격조인 = 스트림에서 일정시간 간격으로 떨어진 두 스트림의 이벤트를 공통키로 조인한다.
 
윈도우조인 = 두 입력 스트림의 레코드는 공통 윈도우에 할당되고 윈도우가 완료되면 조인한다.
 
두 입력 스트림은 각 레코드의 키 값을 기반으로 그룹핑되고, WindowAssigner는 두 스트림의 각 이벤트를 공통 윈도우로 할당한다.
윈도우 타이머가 동작하면 첫 번째와 두 번째 입력의 각 레코드 조합에 대해 JoinFunction을 호출한다.

연착 레코드 = 레코드를 포함해 계산해야 할 연산이 이미 완료된 후에 도착한 레코드.
연착 이벤트를 버리는 가장 쉬운 방법은 그냥 버리는 것. 늦게 도착한 이벤트는 새 윈도우를 생성하지 않는다.
연착 이벤트를 사이드 아웃풋을 사용해 또 다른 데이터 스트림으로 재전송 할 수도 있다.
윈도우 연산자 API는 얼마나 늦어야 연착 이벤트인지 명시적으로 선언할 수 있는 메서드를 제공한다.
워터마크가 윈도우 종료 타임스탬프 + 허용 지연 기간을 지나가면 윈도우가 삭제되고 이후의 연착 이벤트는 버린다.

플링크는 고유 키 속성마다 하나의 키 상태 인스턴스를 유지하고 모든 키 상태 인스턴스를 함수의 여러 병렬 태스크로 분배한다.
키 상태는 KeyedStream에 적용하는 함수에서만 사용 가능하다.
모든 기본 상태는 State.clear( ) 메서드를 호출해 상태를 정리한다.
상태 객체를 생성하려면 RichFunction은 함수가 제공하는 플링크 런타임 객체인 RuntimeContext에 StateDescrip
tor를 등록해야 한다.
상태가 처리하는 데이터 타입은 Class나 TypeInformation을 이용해 지정한다.

연산자의 각 병렬 인스턴스는 연산자 상태를 각각 관리한다.
리스트 상태를 이용하는 함수는 ListCheckpointed 인터페이스를 구현해야 한다.
snapshotState( ) 메서드는 플링크가 상태가 있는 함수에 체크포인팅을 동작시킬 때 호출된다.
플링크는 잡을 시작하거나 실패가 발생해 함수의 상태를 초기화할 필요가 있을 때 항상 restoreState( ) 메서드를 호출한다. 이 메서드는 상태 리스트 객체를 인자로 받으며, 연산자는 이 리스트 객체를 이용해 상태를 복구해야 한다.
스트리밍 애플리케이션의 공통 요구사항 중 하나는 동일 정보를 모든 함수 병렬 인스턴스로 분배하고 복구 가능한 상태로 유지해야 한다는 것이다.

함수가 브로드캐스트 상태를 이용하려면 세 단계를 거쳐야 한다.
1.	DataStream.broadcast( )를 호출하고 하나 이상의 MapStateDescriptor객체를 제공해 BroadcastStream을 생성한다.
2.	BroadcastStream을 DataStream이나 KeyedStream에 연결한다.
3.	BroadcastStream과 연결한 스트림에 함수를 적용한다.

ProcessElement에서 반환된 브로드캐스트 상태 핸들은 읽기 전용이다.
CheckpointedFunction 인터페이스는 상태가 있는 함수에 지정할 수 있는 가장 저수준의 인터페이스다. 이 인터페이스는 키 상태나 연산자 상태를 등록하고 유지할 수 있는 훅을 지원하고 리스트 유니온 상태에 접근할 수 있는 유일한 인터페이스다.
플링크는 체크포인팅 수행 직전에 snapshotState( ) 메서드를 호출하고 FunctionSnapshotContext 객체를 인자로 받는다.

잦은 동기화는 분산 시스템 성능 저하의 주요 원인이다. 플링크 체크포인트의 설계 목표는 동기화 지점을 줄이는 것.
체크포인팅 완료를 알림으로 받고 싶은 연산자는 CheckpointListener 인터페이스를 구현하면 된다.
플링크는 각 체크포인팅 완료마다 notifyCheckpointComplete( ) 호출을 보장하지 않는다.
잡매니저는 일정 주기로 체크포인팅을 수행해 애플리케이션에 장애 극복을 제공한다.
체크포인팅 주기를 짧게 할수록 데이터 처리는 높은 오버헤드를 발생시키지만, 더 적은 데이터를 재처리하면 되므로 데이터 복구는 더 빠를 수 있다.
플링크는 연산자 상태 데이터를 저장할 때 연산자 식별도 메타데이터로 세이브포인트에 저장한다.
MemoryStateBackend는 상태를 태스크매니저 프로세스의 힙에 일반 객체로 저장한다.
FsStateBackend는 MemoryStateBackend 처럼 로컬 상태를 태스크매니저의 JVM 힙에 저장한다.
RocksDBStateBackend는 모든 상태를 로컬의 RocksDB 인스턴스에 저장한다.
RocksDBStateBackend의 ListState구현은 모든 요소의 값을 읽고 역직렬화 해 Iterable 객체로 만든다.

시간이 지남에 따라 애플리케이션의 자원 소비량을 늘어나지 않게 하려면 연산자의 상태 크기를 통제할 수 있도록 만들어야 한다.
플링크가 상태를 직접 건드리면 연산자 시멘틱에 영향을 주므로 플링크는 자동으로 상태를 정리하고 저장소를 비우는 기능을 제공하지 않는다.
상태가 커지는 일반적 원인은 계속 진화하는 키 도메인이다.
계속 변하는 키 도메인에 대해 키 상태가 필요한 애플리케이션이라면 키 상태가 더 필요 없을 때 키 상태 정리를 보장해야 한다.
KeyedProcessFunction은 항상 현재 타이머를 삭제하고 새 타이머를 등록해 등록한 타이머로 갱신하므로 키별로 오직 한 타이머만 등록된다.
애플리케이션을 세이브포인트와 호환되게 수정할 수 있는지 여부는 애플리케이션의 초기 설계에 따라 결정된다.
플링크는 세이브포인트에 있는 상태 유실을 피하려고 세이브포인트에 있는 모든 상태를 복원하지 않는 애플리케이션은 시작하지 않는다.
플링크의 타입 시스템은 상태의 데이터타입에 따라 시리얼라이저를 생성하므로 상태의 데이터 타입이 변경되면 시리얼라이저도 변경돼야 한다.
플링크는 모든 키 상태를 쿼리 가능한 상태로 외부에 노출할 수 있다.
쿼리 가능한 상태가 외부 데이터 저장소를 필요로 하는 모든 부분을 해결할 수 없다.

플링크로 쿼리 가능한 상태 서비스 이용 단계
1.	외부 애플리케이션은 QueryableStateClient를 이용해 쿼리를 내보내고 결과를 받는다.
2.	QueryableStateClientProxy는 클라이언트 요청을 받아 서비스를 제공한다.
3.	QueryableStateServer는 QueryableStateClientProxy의 요청을 처리한다.

 
쿼리 가능한 상태 서비스를 사용하려면 플링크 설치 시 flink-queryable-state-runtime JAR 파일을 태스크매니저 프로세스의 클래스패스에 추가해야 한다. 
setQueryable( ) 메서드에 넘긴 외부 식별자는 자유롭게 선택할 수 있으며 이 외부 식별자는 QueryableStateCli
ent의 설정에만 사용한다.
asQueryableState( ) 메서드는 쿼리 가능한 상태를 스트림 싱크로 추가한다.
JVM기반의 애플리케이션은 QueryableStateClient를 사용해 실행 중인 플링크 애플리케이션의 쿼리 가능한 상태를 쿼리할 수 있다.

애플리케이션에 ‘정확히 한 번 상태 일관성’을 제공하려면 애플리케이션 소스 커넥터는 읽기 위치를 이전 체크포인트 위치로 재설정할 수 있어야 한다.
싱크 커넥터가 정확히 한 번 일관성을 보장할 때 적용할 수 있는 기술 2가지가 있다.
1.	멱등적 쓰기 = 여러 번 수행은 되지만 변경은 단 한 번만 일어나는 연산. 스트리밍 애플리케이션이 멱등적 쓰기로 정확히 한 번 일관성 보장을 구현한 싱크를 사용한다면 재실행할 때 새로운 결과가 이전 결과를 교체할 수 있음을 유의해야 한다.
2.	트랜잭션 쓰기 = 마지막으로 성공한 체크포인트의 계산 결과까지만 외부 싱크시스템에 쓰는 것이다.

플링크는 트랜잭션 싱크 커넥터를 구현하고자 WAL싱크와 2PC 싱크 두 가지를 제공한다.
WAL싱크는 모든 결과 레코드를 애플리케이션의 상태에 쓰고 체크포인트 완료 알림을 받으면 싱크 시스템에 이 결과를 내보낸다.
2PC싱크는 체크포인팅마다 새 트랜잭션을 시작하고, 모든 수신 레코드를 이 트랜잭션에 추가한다.
체크포인트 배리어는 새 트랜잭션을 시작하는 알림이고, 모든 연산자의 개별 체크포인트 성공 알림은 커밋을 할지 말지 결정하는 투표다.
2PC싱크는 WAL 싱크의 스파이크 쓰기 패턴과 달리 결과 레코드를 지속적으로 싱크 시스템에 쓴다.

플링크는 카프카 버전에 대한 모든 소스 커넥터를 제공한다.
카프카 파티션 중 하나가 비활성 상태여서 메시지를 제공하지 않는다면 소스 인스턴스의 워터마크는 앞으로 진행되지 않을 것이다.

카프카 싱크는 아래 조건하에 최소 한 번 일관성을 보장한다.
	플링크 체크포인트를 활성화하고 애플리케이션의 모든 소스를 재설정할 수 있다.
	싱크 커넥터는 쓰기가 성공하지 않으면 예외를 던져 애플리케이션을 중단시키고 복구하게 한다.
	싱크 커넥터는 체크포인트가 완료되기 전에 쓰기 요청한 레코드에 대한 ACK가 오기를 기다린다.

카프카는 transaction.timeout.ms 속성으로 설정한 시간이 지나면 트랜잭션을 취소하고 닫는다.
RollingPolicy는 태스크가 새 부분파일을 언제 생성할지 결정한다.
로우 인코딩은 모든 레코드를 개별적으로 인코딩하고 부분파일에 추가한다.
벌크 인코딩은 레코드를 모아서 배치방식으로 쓴다.
StreamingFlinkSink는 정확히 한 번 출력 일관성을 보장한다.
보류 중인 파일은 절대 커밋되지 않는다. 즉, 자동으로 정리되지 않음. 동일 태스크 인덱스에 더 큰 ID를 가진 커밋된 파일을 발견하면 보류 중 파일을 안전하게 삭제할 수 있다.
플링크는 데이터 스트림을 카산드라에 쓸 수 있는 싱크 커넥터를 제공한다.

대부분의 경우 SinkFunction 인터페이스로 멱등적 싱크 커넥터를 충분히 구현할 수 있다.
GenericWriteAheadSink는 최소 한 번 일관성만 보장한다.
싱크 태스크는 체크포인트에 대한 ACK를 전송하고 나면 장애가 발생하더라도 관련 트랜잭션을 커밋할 수 있어야 한다.

TwoPhaseCommitSinkFunction은 5개 함수를 구현해야 한다.
1.	beginTransaction = TXN은 새 트랜잭션을 시작하고 트랜잭션 식별자를 반환한다.
2.	invoke = Unit은 현재 트랜잭션에 값을 쓴다.
3.	preCommit = Unit은 트랜잭션에 사전 커밋을 한다.
4.	commit = Unit은 트랜잭션을 커밋한다.
5.	abort = Unit은 트랜잭션을 중단한다.

플링크는 독립 클러스터, 하둡 YARN 클러스터, 쿠버네티스 클러스터 같은 다양한 환경에 배치할 수 있다.

p.340

디스패처는 내부적으로 잡매니저 스레드를 시작하고 실행에 필요한 잡그래프를 제공한다.
플링크는 로컬 머신에서 마스터 하나와 태스크매니저 하나를 실행하도록 미리 설정돼 있다.
.conf/flink-conf.yaml의 java.home 파라미터에 자바가 설치된 디렉터리를 지정할 수 있다.
태스크매니저를 시작하려면 start-cluster.sh 스크립트가 비밀번호 없는 SSH로 모든 장비에 접속할 수 있어야 한다.
마스터 프로세스가 실행 중인 장비의 호스트 이름을 ./conf/flink-conf.yaml 파일의 jobmanager.rpc.address 키에 값으로 설정해야 한다.
플링크는 로컬 잡매니저와 slaves 파일에 있는 모든 장비마다 태스크매니저를 하나씩 시작한다.

p. 345

플링크는 YARN 위에서 잡 모드와 세션 모드 두 가지 방식으로 실행할 수 있다.
잡매니저는 플링크 잡 실행에 필요한 슬롯을 리소스매니저에 요청한다. 그러면 플링크 리소스매니저는 YARN 리소스매니저에 컨테이너를 요청하고 태스크매니저 프로세스를 시작한다.
세션모드는 장시간 실행되는 플링크 클러스터를 시작해 여러 잡을 실행하며 종료는 직접 해야 한다.

p. 346

./bin/yarn-session.sh 스크립트로 플링크 YARN 세션을 시작할 수 있다.
플링크 YARN 세션이 시작되면 ./bin/flink run ./path/to/job.jar 명령으로 세션에 잡을 제출할 수 있다.
플링크 고가용성을 설정하려면 주키퍼 클러스터와 HDFS, NFS, S3같은 영구적 원격 저장소가 필요하다.
주키퍼를 쓰려면 먼저 ./conf/zoo.cfg 파일의 환경설정을 변겨해 클러스터에 있는 모든 주키퍼 프로세스의 호스트와 포트를 환경설정 해야 한다. 이후 ./bin/start-zookeeper-quorum.sh를 실행해 주키퍼 프로세스를 시작할 수 있다.






고가용성 설정을 하면 플링크는 독립형 설정의 모든 디스패처를 주키퍼에 등록한다.
